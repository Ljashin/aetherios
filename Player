using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;

[RequireComponent(typeof(PlayerSetup))]
public class Player : NetworkBehaviour {
	
	[SyncVar]
	bool _isDead = false;

	public bool isDead {
		get { return _isDead; }
		protected set { _isDead = value; }
 	}

	[SyncVar]
	int maxHealth = 200;

	[SyncVar]
	int currentHealth;

	public int GetHealthAmmount() {
		return currentHealth;
	}	

	public int GetMaxHealth() {
		return maxHealth;
	}

	[SyncVar]
	public int Kills;

	[SerializeField]
	Behaviour[] disableOnDeath;

	PlayerController playerController;
	Motor motor;

	bool[] wasEnable;

	[SerializeField]
	GameObject[] disabledGameObjectsOnDeath;

	[SerializeField]
	GameObject deathEffect;

	[SerializeField]
	GameObject SpawnEffect;

	GameObject orbHolder;
	GameObject ritualOrb;

	ScreenDamageEffect screenEFX;
	GameProgress gameProgress;
	PlayerGraphics playerGraphics;
	PlayerShoot playershoot;

	[SyncVar]
	public bool holdsOrb;

	bool firstSetup = true;

	public Text playerName;

	List<GameObject> playerMiniMoons = new List<GameObject>();

	DeathBoardUI deathBoardUI;

	Transform fireSpawnPoint;
	Transform waterSpawnPoint;
	Transform earthSpawnPoint;
	Transform airSpawnPoint;


	void Start() {
		StartCoroutine(InitialSetup());
	}

	public void SetupPlayer () {
		if(isLocalPlayer) {
			GameManager.instance.SetSceneCameraActive(false, this.gameObject);
			GetComponent<PlayerSetup>().playerUIInstance.SetActive(true);
		}
		CmdBroadCastNewPlayerSetup();
		SetPlayerName();
	}

	[Command]
	private void CmdBroadCastNewPlayerSetup() {
		RpcSetupPlayerOnAllClients();
	}

	[ClientRpc]
	private void RpcSetupPlayerOnAllClients() {
		if(firstSetup) {
			wasEnable = new bool[disableOnDeath.Length];
			for (int i = 0; i < wasEnable.Length; i++) {
				wasEnable[i] = disableOnDeath[i].enabled;
			}
			firstSetup = false;
		}
		SetDefaults();
	}

	[Client]
	void SetPlayerName() {
		playerName.text = PlayerInfoManager.playerInfoManager.GetPlayerName();
		string _hoveringName = playerName.text;

		Player _player = GameManager.GetPlayer(transform.name);
		string _playerID = _player.name;
		if (!isServer) {
			CmdReleaseSetPlayerName (_hoveringName, _playerID);
		}
	}

	[Command]
	void CmdReleaseSetPlayerName(string _hoveringName, string _playerID) {
		Player _player = GameManager.GetPlayer(_playerID);
		_player.GetComponent<Player>().playerName.text = _hoveringName;

		List<GameObject> _allPlayers = new List<GameObject>();

		_allPlayers.AddRange(GameObject.FindGameObjectsWithTag("Player"));

		for (int i = 0; i < _allPlayers.Count; i++) {
			Player _somePlayer = GameManager.GetPlayer(_allPlayers[i].name);
			string _playerId = _somePlayer.name;
			string _playerNames = _somePlayer.playerName.text;
			RpcDisplayName(_playerId, _playerNames);
		}
	}

	[ClientRpc]
	void RpcDisplayName(string _playerId, string _playerName) {
		Player _player = GameManager.GetPlayer(_playerId);
		if(_player) {
			_player.playerName.text = _playerName;
		}
	}

	[Command]
	public void CmdEnvironmentDamage(int _damage, string _sourceID) {
		RpcTakeDamage(_damage, _sourceID);
	}

	[ClientRpc]
	public void RpcTakeDamage(int _damage, string _sourceID) {
		if(isDead) return;

		currentHealth -= _damage;

		if(currentHealth <= 0) {
			Die(_sourceID);
			if (isLocalPlayer) {
				playerController.ResetWaterUI ();
				GetComponent<NetWorkEvenManager> ().StartCallSpawnOrb (transform.position);
				motor.StartCoroutine ("DeathLaps");
				motor.isTeleporting = false;
			}
		}
		if (isLocalPlayer) {
			if (currentHealth > 0) {
				string _ennemyElement = "";
				if (_sourceID != "Fire" && _sourceID != "Water" && _sourceID != "Earth" && _sourceID != "Air") {
					Player _ennemy = GameManager.GetPlayer (_sourceID);
					PlayerShoot _ennemyPlayerShoot = _ennemy.GetComponent<PlayerShoot> ();

					if (_ennemyPlayerShoot.fireElement) {
						_ennemyElement = "Fire";
					} else if (_ennemyPlayerShoot.waterElement) {
						_ennemyElement = "Water";
					} else if (_ennemyPlayerShoot.earthElement) {
						_ennemyElement = "Earth";
					} else if (_ennemyPlayerShoot.airElement) {
						_ennemyElement = "Air";
					}
				}
				else {
					_ennemyElement = _sourceID;
				}
				screenEFX.ActivateEffect (_ennemyElement);
			}
		}
	}
	public void RegerateHP(int _health) {
		if (currentHealth + _health >= maxHealth) {
			currentHealth += _health;
		} else {
			currentHealth = maxHealth;
		}
	}

	public void SetNewMaxHp(int _maxHealth) {
		int _healthDif = _maxHealth - maxHealth;
		maxHealth = _maxHealth;
		currentHealth += _healthDif;
	}

	void Die(string _sourceID) {
		isDead = true;
		Kills--;
		if (_sourceID != "Fire" && _sourceID != "Water" && _sourceID != "Earth" && _sourceID != "Air") {
			Player _sourcePlayer = GameManager.GetPlayer (_sourceID);

			if (_sourcePlayer != null) {
				_sourcePlayer.Kills++;
			}
		}

		GetComponent<WeaponManager> ().ResetWeapons ();
		GetComponent<PlayerShoot> ().SetWeaponLevel (1);

		gameProgress.PublishNewScore(transform.name, _sourceID);

		for (int i = 0; i < disableOnDeath.Length; i++) {
			disableOnDeath[i].enabled = false;
		}

		for (int i = 0; i < disabledGameObjectsOnDeath.Length; i++) {
			disabledGameObjectsOnDeath[i].SetActive(false);
		}

		Collider _col = GetComponent<Collider>();
		if(_col != null) {
			_col.enabled = false;
		}

		GameObject _deatGfxIns = (GameObject)Instantiate(deathEffect, transform.position, Quaternion.identity);
		Destroy(_deatGfxIns, 4f);

		if(isLocalPlayer) {
			GameManager.instance.SetSceneCameraActive(true, this.gameObject);
			GetComponent<PlayerSetup>().playerUIInstance.SetActive(false);
		}
		if (_sourceID != "Fire" && _sourceID != "Water" && _sourceID != "Earth" && _sourceID != "Air") {
			Player _player = GameManager.GetPlayer (_sourceID);
			string _playerName = _player.playerName.text;
			deathBoardUI.AnnouceDeathReason (playerName.text, _playerName);

		} else if (_sourceID == "Fire") {
			deathBoardUI.AnnouceDeathReason (playerName.text, "Fire");
		} else if (_sourceID == "Water") {
			deathBoardUI.AnnouceDeathReason (playerName.text, "Water");
		} else if (_sourceID == "Earth") {
			deathBoardUI.AnnouceDeathReason (playerName.text, "Earth");
		} else if (_sourceID == "Air") {
			deathBoardUI.AnnouceDeathReason (playerName.text, "Air");
		}
			
		foreach (GameObject _moon in playerMiniMoons) {
			_moon.GetComponentInChildren<SmallMoon> ().RemovePlayer (this.gameObject);
		}

		ClearRitualOrbs();
		playerController.SetWaterSpecs (false);
		StartCoroutine(Respawn());
	}

	[Command]
	void CmdOnPublisScore(string playerID, string _sourceID) {
		RpcPublishDelivery(playerID, _sourceID);
	}

	[ClientRpc]
	void RpcPublishDelivery(string playerID, string _sourceID) {
		gameProgress.PublishNewScore(playerID, _sourceID);
	}

	public void SetDefaults() {
		isDead = false;

		currentHealth = maxHealth;

		for (int i = 0; i < disableOnDeath.Length; i++) {
			disableOnDeath[i].enabled = wasEnable[i];
		}

		for (int i = 0; i < disabledGameObjectsOnDeath.Length; i++) {
			disabledGameObjectsOnDeath[i].SetActive(true);
		}

		Collider _col = GetComponent<Collider>();
		if(_col != null) {
			_col.enabled = true;
		}

		StartCoroutine(SpawnEffectAnimation());
	}

	public void SetOrb(GameObject _orb) {
		ritualOrb = _orb;
		holdsOrb = true;
		ritualOrb.transform.SetParent (orbHolder.transform);
		ritualOrb.transform.localPosition = Vector3.zero;
	}
		
	public GameObject PassRitualOrb() {
		return ritualOrb;
	}
		
	public GameObject GetOrbHolder() {
		return orbHolder;
	}

	public void SetOrb() {

	}

	public void ClearRitualOrbs() {
		if (holdsOrb) {
			ritualOrb.GetComponent<RitualOrb> ().resetOrb ();
		}
		ritualOrb = null;
		holdsOrb = false;
	}

	[Client]
	public void OnSetSkin(string _element) {
		CmdSetSkinElement(_element, transform.name);
	}

	[Command]
	void CmdSetSkinElement(string _element, string _playerID) {
		RpcSetPlayerSkin(_element, _playerID);
	}

	[ClientRpc]
	void RpcSetPlayerSkin(string _element, string _playerID) {
		Player _player = GameManager.GetPlayer(_playerID);
		_player.GetComponentInChildren<PlayerGraphics>().SetSkin(_element);
		if(_element == "Fire") {
			_player.GetComponent<PlayerShoot>().fireElement = true;
		}
		if(_element == "Water") {
			_player.GetComponent<PlayerShoot>().waterElement = true;
		}
		if(_element == "Earth") {
			_player.GetComponent<PlayerShoot>().earthElement = true;
		}
		if(_element == "Air") {
			_player.GetComponent<PlayerShoot>().airElement = true;
		}
	}

	IEnumerator Respawn() {
		yield return new WaitForSeconds(GameManager.instance.matchSettings.respawnDelay);

		GameManager.instance.reposSceneCamera = false;

		if (playershoot.fireElement) {
			transform.position = fireSpawnPoint.position;
			transform.rotation = fireSpawnPoint.rotation;
		} else if (playershoot.waterElement) {
			transform.position = waterSpawnPoint.position;
			transform.rotation = waterSpawnPoint.rotation;
		} else if (playershoot.earthElement) {
			transform.position = earthSpawnPoint.position;
			transform.rotation = earthSpawnPoint.rotation;
		} else if (playershoot.airElement) {
			transform.position = airSpawnPoint.position;
			transform.rotation = airSpawnPoint.rotation;
		} else {
			Transform _spawnPoint = NetworkManager.singleton.GetStartPosition();
			transform.position = _spawnPoint.position;
			transform.rotation = _spawnPoint.rotation;
		}

		yield return new WaitForSeconds(0.1f);

		SetupPlayer();
		playerGraphics.SetStartDefaultSpec ();
		motor.StartCoroutine ("DeathLaps");
	}

	IEnumerator SpawnEffectAnimation() {
		yield return new WaitForSeconds(0.1f);

		Vector3 spawnPos = transform.position;
		spawnPos -= Vector3.up * 1.5f;

		GameObject _spawnEffect = (GameObject)Instantiate(SpawnEffect, spawnPos,  transform.rotation);
		Destroy(_spawnEffect, 4f);
	}

	public IEnumerator InitialSetup() {
		yield return new WaitForSeconds (0.2f);
		gameProgress = GameObject.FindGameObjectWithTag ("GameProgress").GetComponent<GameProgress> ();
		playerController = GetComponent<PlayerController> ();
		playerController.SetDeffaultGravitator ();

		playerMiniMoons.AddRange(GameObject.FindGameObjectsWithTag ("MiniMoon"));
		orbHolder = GetComponentInChildren<OrbHolder> ().gameObject;
		fireSpawnPoint = GameObject.FindGameObjectWithTag("FireSpawnPoint").transform;
		waterSpawnPoint = GameObject.FindGameObjectWithTag("WaterSpawnPoint").transform;
		earthSpawnPoint = GameObject.FindGameObjectWithTag("EarthSpawnPoint").transform;
		airSpawnPoint = GameObject.FindGameObjectWithTag("AirSpawnPoint").transform;

		deathBoardUI = GetComponentInChildren<DeathBoardUI> ();
		playerGraphics = GetComponentInChildren<PlayerGraphics> ();
		playershoot = GetComponent<PlayerShoot> ();
		motor = GetComponent<Motor> ();

		if (isLocalPlayer) {
			screenEFX = GetComponent<PlayerSetup> ().playerUIInstance.GetComponentInChildren<ScreenDamageEffect> ();
		}
	}
